Temp
# Example configuration entry
switch:
  - platform: gpio
    pin: GPIOXX
    id: relay
    name: "Gate Remote"
    icon: "mdi:gate"
    on_turn_on:
    - delay: 500ms
    - switch.turn_off: relay


on_turn_on:

    - delay: 500ms


     # Example configuration entry
 globals:
   - id: my_global_int
     type: int
     restore_value: no
     initial_value: '0'
   # Example for global string variable
   - id: my_global_string
     type: std::string
     restore_value: yes
     max_restore_data_length: 24
     initial_value: '"Global value is"'

# In an automation
on_...:
  then:
    - lambda: |-
        if (id(my_global_int) > 5) {
          // global value is greater than 5
          id(my_global_int) += 1;
        } else {
          id(my_global_int) += 10;
        }

        ESP_LOGD(TAG, "%s: %d", id(my_global_string).c_str(), id(my_global_int));


script:
  - id: blink_light
    parameters:
      delay_ms: int
    then:
      - light.turn_on: status_light
      # The param delay_ms is accessible using a lambda
      - delay: !lambda return delay_ms;
      - light.turn_off: status_light


Supported data types:

bool: A boolean true/false. C++ type: bool

int: An integer. C++ type: int32_t

float: A floating point number. C++ type: float

string: A string. C++ type: std::string

Each of these also exist in array form:

bool[]: An array of boolean values. C++ type: std::vector<bool>

Same for other types.


      # in a trigger:
on_...:
  then:
    - script.execute: my_script

    # Calling a non-parameterised script in a lambda
    - lambda: id(my_script).execute();

    # Calling a script with parameters
    - script.execute:
        id: blink_light
        delay_ms: 500

    # Calling a parameterised script inside a lambda
    - lambda: id(blink_light)->execute(1000);



lambda: |-
  static int num_executions = 0;
  ESP_LOGD("main", "I am at execution number %d", num_executions);
  num_executions += 1;



- repeat:
      count: 5
      then:
        - light.turn_on: some_light
        - delay: 1s
        - light.turn_off: some_light
        - delay: 10s

on_boot:
    priority: 600
    # ...
    then:
      - switch.turn_off: switch_1        