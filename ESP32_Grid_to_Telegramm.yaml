#GPIO12 - D6 - grid binary_sensore "0" - Grid is available (220V), 
#"1" - Grid is absent (0V)
#
#GPIO14 - D5 binary conf pin . if = "1" - GPIO12 -D6 is inverted
#grid binary_sensore "0" - Grid is absent (0V), 
#"1" - Grid is available (220V)
#
#GPIO2 - D4 - Internal Led (id="Led1) inverted:true
#GPIO5 - D1 - External Led (id="Led2) inverted:false
substitutions:
  TELEGRAM_BOT_TOKEN: !secret sTELEGRAM_BOT_TOKEN
  chat_id: !secret schat_id
  trigger1: "1"

esphome:
  name: 220gridsensor
  friendly_name: 220gridsensor

esp8266:
  board: d1_mini

# Enable logging
logger:

globals:
#blink couter 
   - id: global_var_int1
     type: int
     restore_value: yes
     initial_value: '0'
   - id: global_var_flashing
     type: int
     restore_value: yes
     initial_value: '0'
                  

# Enable Home Assistant API
#api:
#  password: "1234567890"

ota:
  - platform: esphome
    password: "1234567890"

wifi:
  ssid: "esptool"
  password: "1111qQ1111qQ,@,@"

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "ap_espD1grid"
    password: "1234567890"

captive_portal:

#status_led:
#  pin: GPIO2

output:
  - platform: gpio
    pin: GPIO2
    id: led1_output
    inverted: false
              #if (id(Binary_sensor_inversion).state) 
              #{return "true";
              #} else {return "false";
              #} 
  - platform: gpio
    pin: GPIO5
    id: led2_output
    inverted: true #if true LED is on when Grid is Absent OK!
          

light:
  - platform: binary
    name: "Led1"
    id: Led1
    #pin: GPIO2
    output: led1_output
  - platform: binary
    name: "Led2"
    id: Led2
    #pin: GPIO5
    output: led2_output 
    
time:
  - platform: sntp
    # ...
    on_time:
      # Every  seconds
      - seconds: /1
        then: 
        #C++ lambda inserted
          - lambda: |-
              if (id(global_var_flashing) == 1 ) 
              {
                  if (id(global_var_int1) != 0) 
                  {
                  //# global value is 0
                  id(global_var_int1) = 0;
                  auto call2 = id(Led2).turn_on();
                  call2.perform();

                  } else {
                  id(global_var_int1) = 1;
                
                  auto call2 = id(Led2).turn_off();
                  call2.perform();
                  }
              }       
                  
          - logger.log: "global_var_int1,  id(global_var_int1)"    

http_request:
  useragent: esphome/device
  timeout: 10s
  verify_ssl: false


binary_sensor:
  - platform: gpio
    internal: false
    name: "Binary_sensor1_grid_status_buro"
    pin:
      #number: GPIO12 - D6
      number: GPIO12
      inverted: false
      pullup: true
    id: Binary_sensor_grid_status
    filters:
      delayed_on_off: 10000ms
#on state
    on_state:
      then:
        #- light.turn_on: Led2
        #- delay: 1s
        #- light.turn_off: Led2
        #- delay: 1s 
#end of state    

    on_press:
    #  min_length: 150ms
    #  max_length: 5s
      then:
        #- switch.toggle: pym_output_relay send http
        - lambda: |
            if (id(Binary_sensor_inversion).state) 
                { auto call = id(Led1).turn_off();
                  call.perform();
                  auto call2 = id(Led1).turn_off();
                  call2.perform();
                } else { auto call = id(Led1).turn_on();
                  call.perform();
                  auto call2 = id(Led1).turn_on();
                  call2.perform();
                }
        #- light.turn_on: Led1
        - http_request.post:
            url: "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage"
            headers:
              Content-Type: application/json
            json:
              chat_id: ${chat_id}
              #text: "Grid is OFF ðŸ˜ "
              text: !lambda |-
                if (id(Binary_sensor_inversion).state) 
                {return "Grid is ON ðŸ˜€";
                } else {return "Grid is OFF ðŸ˜ ";
                } 
    on_release:
    #  min_length: 150ms
    #  max_length: 5s
      then:
        #- switch.toggle: pym_output_relay send http
        - lambda: |
            if (id(Binary_sensor_inversion).state) 
                { auto call = id(Led1).turn_on();
                  call.perform();
                  auto call2 = id(Led1).turn_on();
                  call2.perform();
                } else { auto call = id(Led1).turn_off();
                  call.perform();
                  auto call2 = id(Led1).turn_off();
                  call2.perform();
                }
        #- light.turn_off: Led1
        - http_request.post:
            url: "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage"
            headers:
              Content-Type: application/json
            json:
              chat_id: ${chat_id}
              text: !lambda |-
                if (id(Binary_sensor_inversion).state) 
                {return "Grid is OFF ðŸ˜ ";
                } else {return "Grid is ON ðŸ˜€";
                } 
              #text: "Grid is ON ðŸ˜€"
  - platform: gpio
    internal: false
    name: "inversion"
    pin:
      #number: GPIO14 - D5
      number: GPIO14
      inverted: false
      pullup: true
    id: Binary_sensor_inversion
    filters:
      delayed_on_off: 1000ms
    on_press:
      #  min_length: 150ms
      #  max_length: 5s
      then:
          #- switch.toggle: pym_output_relay send http  
    on_release:
      #  min_length: 150ms
      #  max_length: 5s
      then:
        #- switch.toggle: pym_output_relay send http

web_server: 
  port: 8080
  auth:
    username: admin
    password: admin
    
